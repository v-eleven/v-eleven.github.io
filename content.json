[{"title":"PHP 快速入门","date":"2020-01-10T12:33:01.000Z","path":"2020/01/10/simple-php-guide/","text":"啥是 PHP？这里就不细说了，网上搜索一下就知道了。简单来说，PHP 其实就是一种脚本编程语言，可以用它来做很多事情，不过目前主要还是用来写写网站。跟 C 语言、Java 等相比，它很简单，很容易上手。你不信？继续往下看就知道了。 想在屏幕上显示一行“你好”？ 12&lt;?phpecho \"你好\\n\"; 对，就是这么简单，一行代码即可。不像 Java，需要写上一堆代码才能实现同样的功能。PHP 是解释型的编程语言，所以需要配合“PHP 解释器”来执行我们已经写好的代码。废话不多说，我们先来下载一个“PHP 解释器”吧。大多数人应该在使用 Windows 系统，所以我们直接去官网下载 Windows 版，下载完成后解压即可。下载地址是：https://windows.php.net/downloads/releases/php-7.2.26-nts-Win32-VC15-x64.zip PHP 解释器目录结构 什么？不需要下载 MySQL 数据库、Nginx 服务器和 Apache 服务器的吗？是的，全都不需要。入门只需要一个“PHP 解释器”就足够了，没必要搞得那么复杂。并且，“PHP 解释器”内置了一个 Web 服务器哦。我们来试试吧，先在 F 盘新建一个文件命名为 index.php，用记事本（推荐使用 Visual Studio Code 编辑器）打开就行，然后填入上面的那两行代码（注：&lt;?php 是固定内容，用来标记这是 PHP 代码）并保存。接着，在 F 盘（需要提供 Web 服务的目录）中执行 CMD 命令 F:\\php-7.2.26\\php.exe -S 0.0.0.0:80（我的解释器解压在 F 盘中，具体路径还以实际为主），最后打开浏览器访问 http://127.0.0.1 看看效果？ 学习编程语言，其实也是有套路的，因为不管哪种语言，都逃不过这些东西：变量、常量、数据类型、选择结构、循环结构、函数。好，到此为止，有这些就足够了，学会这些就可以写一个完整的程序了。留言板大家应该都不陌生了吧，待会儿我们就可以手写一个留言板网站了，咱先看看效果吧。 没有任何留言 提交留言内容 虽然丑，但是，这不是重点！这不是重点！这不是重点！这样的一个留言板网站，所有代码加起来只有 100 行左右！并且！PHP 代码只有十几行！其他的都是 HTML,CSS 代码了。是的，就是这么简单。至于好不好看，那就是 HTML,CSS 的事情了，也不是这篇文章的重点。好了，不说废话，这十几行核心代码直接放出来！（文章底部会有详细讲解哦，不懂的话还可以问我哦） 123456789101112131415&lt;?phpdefine('DATA_FILE_PATH', __DIR__ . '/data.txt');date_default_timezone_set('Asia/Shanghai');$data = file_exists(DATA_FILE_PATH) ? file_get_contents(DATA_FILE_PATH) : '[]';$data = json_decode($data, true);$postName = $_POST['name'] ?? '';$postContent = $_POST['content'] ?? '';if (!empty($postName) &amp;&amp; !empty($postContent)) &#123; array_unshift($data, ['n' =&gt; $postName, 'c' =&gt; $postContent, 't' =&gt; time(), 'rgb' =&gt; [rand(0, 255), rand(0, 255), rand(0, 255)]]); file_put_contents(DATA_FILE_PATH, json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));&#125; 一脸懵逼？还是，内心里大喊了一声：这也太简单了吧！不急不急，咱们再简单地聊聊 PHP 知识吧。 PHP 的变量很有个性，必须要用 $ 开头；常量可以用内置函数 define() 来定义，常量就不需要加 $ 了，建议使用全大写字母来表示常量，这是一种良好的编程习惯。顾名思义了，变量的值可以随时改变，常量的值一旦定义后就不能改变了。可以思考一下，什么情况下使用变量，什么情况下使用常量。 1234// 这里定义了一个字符串变量$name = 'veleven';// 这里定义了一个常量define('PI', 3.14); 数据类型无非“数值、字符串、布尔、数组”，目前知道这些就足够了。数值也可以理解为数字；字符串多数情况下建议使用单引号就行了；布尔其实就是真假判断；数组就好玩了，它可以将数值、字符串、布尔、数组放在一起作为一个整体，用 [] 包裹起来就行了，并且数组里的元素可以用下标的方式取出来，数组的下标默认是从 0 开始且依次递增。 1234567891011// 数值$number1 = -1;$number2 = 1;$number3 = 3.14;// 字符串$string = 'veleven';// 布尔$bool1 = true;$bool2 = false;// 数组，$array[2] 的值就是 true$array = [0, 'veleven', true, [1, 2, 3]]; 关于选择结构、循环结构、函数等等，我就不再细说了，推荐去“菜鸟教程”继续学习，特别适合入门，没有收广告费！以上，算是抛砖引玉吧，只是我个人对 PHP 和编程的一些理解，网上的一些教程肯定讲的比我更专业。 接下来，就讲讲留言板的核心代码了！留言板的功能其实很简单，用户提交“姓名”和“留言内容”给 PHP，PHP 将这些内容整理一下，然后整齐地放入所有留言内容中就可以了。显示的时候，PHP 将所有留言内容取出来，然后一个一个整齐划一地显示出来就行了。与 PHP 代码相关的内容，都写在注释里了。 123456789101112131415161718192021&lt;?php// 定义留言数据文件路径常量，留言内容都存储在这个文件里// __DIR__ 是 PHP 内置常量，代表当前文件的路径define('DATA_FILE_PATH', __DIR__ . '/data.txt');// 跟 PHP 说我们的时区是什么date_default_timezone_set('Asia/Shanghai');// 从数据文件中取出所有数据（是一个留言数据数组）$data = file_exists(DATA_FILE_PATH) ? file_get_contents(DATA_FILE_PATH) : '[]';$data = json_decode($data, true);// 让 PHP 接收用户提交的留言数据，姓名和留言内容$postName = $_POST['name'] ?? '';$postContent = $_POST['content'] ?? '';// 如果留言数据存在的话，就把它放到所有留言数据中，并存储至数据文件中if (!empty($postName) &amp;&amp; !empty($postContent)) &#123; array_unshift($data, ['n' =&gt; $postName, 'c' =&gt; $postContent, 't' =&gt; time(), 'rgb' =&gt; [rand(0, 255), rand(0, 255), rand(0, 255)]]); file_put_contents(DATA_FILE_PATH, json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));&#125; 关于 PHP 的学习资料，首推官网手册！不管你是刚入门还是进阶，都是最佳的学习资料。这里分享一个小技巧：注意到官网手册右上角的搜索框了吗？不知道诸如 json_decode() 这些内置函数是干啥的？搜索一下，你就知道了。这个小技巧，我到现在还在用哦。 以上列出的只是 PHP 的冰山一角，编程这个领域涉及的知识实在是太多了，学无止境。我也希望能和大家一起学习，一起探讨。","tags":[{"name":"PHP","slug":"PHP","permalink":"http://veleven.tk/tags/PHP/"},{"name":"编程","slug":"编程","permalink":"http://veleven.tk/tags/编程/"}]},{"title":"编程杂谈","date":"2019-07-25T08:12:09.000Z","path":"2019/07/25/talk-programming/","text":"编程语言的选择，历来就是圈子里的一个热门话题。随便说一句话，就能引发战争。 PHP 是世界上最好的语言 人生苦短，快学 Python 吧 Java 大法好 … … 这些，我们还是看看就好。编程语言，本质就是一种工具而已。它能写出我们想要的东西来，对于我们来说，它就是最好的编程语言。 甭管黑猫白猫，能抓住老鼠的就是好猫。 所以，知道自己想做什么是最重要的，这样就能针对性的去选择适合自己的编程语言，而不是人云亦云。 据我目前了解，各个语言所擅长的方向如下：C 语言 比较适合写偏底层的程序，如操作系统、硬件驱动程序、系统软件等等，PHP 这个语言就是用 C 语言写出来的；C++ 比较适合写大型的桌面应用程序，许多电脑上的大型游戏就是 C++ 写出来的；Java 目前主要分为三个方向，可以写 Web 后端如 jsp，可以写服务器后端如大数据处理等等，可以写 Android，当然也可以写桌面应用程序，“我的世界”就是 Java 写的，不过用 Java 写桌面软件的不太多，Java 写出来的桌面软件可以实现跨平台运行(Windows, Linux, MacOS…)；C# 可以写 Web 后端，也可以写 Windows 桌面应用程序；PHP 主要就是用来写 Web 后端的，世界上有很多网站的后端都是用 PHP 写的，不过自从有了 Swoole 的加持，PHP 可以做很多事情了。 关于学习既然选择了它，就要好好去学。静下心来学习，你会有很大收获的。 大多数人可能对英语比较头疼，毕竟这都是些国外的玩意儿。不过，真的不用怕，只要你有初中的英语水平就好了。什么？一点英语都不会？字母都不认识？那还是先学一点英语再来学编程吧。至少要认识基本的英语单词吧。编程中，英语单词就那么点，写来写去就那么些。有些还不是英语单词…..（就算英语厉害的也不认识，大家都一样）好吧，其实我英语也就初中水平（此处伤心脸）……也学到现在了，相信你也可以的。不过，英语在后期学习中就相当重要了。毕竟编程是国外的玩意儿，最新的资料都是英文的，想学习最新的技术一定要过英语这道坎儿。你总不能一直在学一些过时的东西吧。 学习过程中肯定也会遇到各种各样的问题，搜索引擎是最好的老师。遇到问题，先自己想想，想不明白就去搜索，你遇到的问题其实别人早就遇到过了，看看别人是怎么解决的。搜索技术资料，首推 Google。至于某度？笑而不语。 只看书，没卵用。编程是一门实践的艺术。多去动手敲敲这些代码，你会发现更多东西的。 实践才是检验真理的唯一标准。 最后编程真的是一件好玩的事儿呢。好好享受它吧 ~","tags":[{"name":"编程","slug":"编程","permalink":"http://veleven.tk/tags/编程/"}]},{"title":"利用 TTS 来写点好玩的东西吧","date":"2019-07-09T15:30:58.000Z","path":"2019/07/09/play-with-tts/","text":"在 有哪些命令行的软件堪称神器？ 中偶然发现了一个好玩的东西： 1for i in `say -v '?' | cut -d ' ' -f 1`; do echo $i &amp;&amp; say -v \"$i\" 'Hello World';done 出于天生的好奇，找朋友在 Mac 下尝试了一番，就这么发现了新世界，玩起来玩起来： Mac 中的 TTS 服务123# 迅速查看了 say 命令的帮助文档man saysay -v Ting-Ting \"哇！Veleven 真帅啊！\" 随着命令的运行，我陶醉在“婷婷”的夸赞声里～ 语音合成是将人类语音用人工的方式所产生。若是将电脑系统用在语音合成上，则称为语音合成器，而语音合成器可以用软/硬件所实现。文字转语音（text-to-speech，TTS）系统则是将一般语言的文字转换为语音，其他的系统可以描绘语言符号的表示方式，就像音标转换至语音一样。 —— 维基百科 Linux 中的 TTS 服务Mac 下竟然有这么好玩的东西，我大 Linux 表示不服！自然通过 Google 搜索一番啦。找到了这几个：espeak, spd-say, say。依次食用，发现还是 spd-say 相对更好用一些。 1spd-say -l zh \"你好哇\" 声音不如Mac上的好听，机械感很强，在这一点上，表示对 Linux 有点失望啊。就不能增加一些好听的语音库嘛。系统内置的语言库已经不能满足我了，突然想到了在线语音合成。哈哈哈，继续 Google。这次竟然找到了 Google 自家的产品了，Google 翻译提供的语音合成 API：https://translate.google.com/translate_tts 开始写一个好玩的东西吧有了语音合成这么好玩的东西，肯定要写点什么东西才有趣。语音合成，语音合成，那就来个准点报时？或者天气预报也可以啊。不多说，就是干！ 1234567891011&lt;?php$weatherData = file_get_contents('http://api.jirengu.com/weather.php');$weatherData = json_decode($weatherData, true);$weatherData = $weatherData['results'][0];$weatherString = sprintf('%s，%s，%s。', $weatherData['currentCity'], $weatherData['weather_data'][0]['date'], $weatherData['weather_data'][0]['weather']);$timeString = date('Y-m-d H:i:s');$content = \"准点播报啦！当前时间：&#123;$timeString&#125;。当前天气情况：&#123;$weatherString&#125;\";$ttsUrl = 'http://translate.google.cn/translate_tts?ie=UTF-8&amp;tl=cmn-Hans-CN&amp;client=tw-ob&amp;q=' . urlencode($content);system(sprintf('mplayer \"%s\"', $ttsUrl)); 找到了一个天气 API，然后获取当前的天气信息，跟当前时间一起拼接成待语言合成的字符串，调用语言合成 API 进行语言合成，最后通过 mplayer 输出音频。将该脚本置入 crontab 中，使其每小时运行一次，一个定时播报时间和天气的小程序就完成啦～","tags":[{"name":"编程","slug":"编程","permalink":"http://veleven.tk/tags/编程/"}]},{"title":"一种学习思路","date":"2019-06-16T18:08:18.000Z","path":"2019/06/17/learning-thinking/","text":"前两天在某群里，看到有人问到：“觉得编程很难，不知道从哪里开始学”，于是便回想自己的学习历程，结合自己的感受和理解回答了这个问题，每个人的学习之路都不一样，这里仅仅只是发表一些个人的看法而已。 记录如下： 可以问问自己，现在最想写出一个什么东西，用什么写最合适，写这个东西需要切分成哪几个部分，每个部分里又都涉及了些什么，这些是会还是不会。由总到分，将问题拆分成一小块一小块，然后逐个解决，总的问题也就解决了。这样想下来，学什么，从哪里开始，就有眉目了。 再比如我想学 XSS，肯定要先查查 XSS 到底是个什么 gui。XSS 属于 Web 前端攻击方式，那肯定要会 Web 前端吧。Web 前端又是什么？然后又查到了 HTML，CSS，JS。对于 XSS 而言，了解到 JS 是关键部分。然后开始逐个学习，学习到了解向熟悉的过渡阶段应该也差不多了，大概就知道怎么回事了。基础的知识会了，然后开始回归到 XSS 本身，学习它的攻击思路。 是的，学习是需要有 耐心 的，这样才能学的深入，而不是皮毛。","tags":[{"name":"编程","slug":"编程","permalink":"http://veleven.tk/tags/编程/"}]},{"title":"对编程以及 C 语言的一些理解","date":"2019-05-26T16:34:22.000Z","path":"2019/05/27/understanding-of-programming/","text":"前些天，在群里看到一个群友，想要仿写一个整人的小程序，看的网上的教程是 VBS 脚本。看了看，感觉还挺好玩的。只是用 VBS 来写还是太随意了一些，代码都能看得到（.vbs 格式的文件，右键选择用记事本打开）。突发奇想，要不用 C 语言写一个出来玩玩？大致看了一下这个 VBS 脚本的代码，理解了这个整人小程序的大致流程（这个程序大概做了些什么），然后就开始动手撸代码啦。 部分代码如下： 1234567891011121314151617int result = IDNO;int count = 0;// 跳出一个确认弹框，如果不点击“是”，就一直弹出这个框while (result != IDYES) &#123; // 记录弹框弹出的次数 count++; result = MessageBox(NULL, \"你是猪嘛？\", \"要老实回答问题哦：\", MB_YESNO); if (count == 3) &#123; MessageBox(NULL, \"哎哟，说谎的孩子可不是好孩子哦。你还有三次机会哦，否则，后果自负哦～\", \"哈哈哈哈哈哈哈：\", NULL); &#125; // 如果弹框弹出了6次及以上，就直接强制关机 if (count &gt;= 6) &#123; system(\"shutdown -s -t 0\"); return 0; &#125;&#125; C 语言入门其实并不难，大多数人应该是从来没有接触过编程，没有一种编程思维，潜意识里觉得它很难。其实只要慢慢习惯它，养成一种编程的思维就好多了。下面的内容，是我对编程基础部分的一些理解。 变量、常量和数据类型变量就好比一个开着的盒子，盒子是固定的，但是里面的东西可以换。常量呢，就像是一个封闭的盒子，里面一旦放了东西，就不能换了。 数据类型可以看作是，盒子里面放的东西具体是哪一种类型的东西，比如这个盒子只能放玩具，那个盒子只能放零食。 不同数据类型的变量，可以对它进行不同的操作。比如，可以把放玩具的盒子里的东西拿出来玩，把放零食的盒子里的东西拿出来吃。 1234// 此处定义了一个变量，名字叫做 count，属于 int 类型，默认给它一个值，为 0int count = 0;// 此处对变量 count 进行加法操作，对原来的 count 加上 3，然后再把计算得出的结果重新放回到 count 变量中count = count + 3; 选择结构选择结构其实很好理解，就是一句话：如果这样，怎么办；如果那样，怎么做。 123456// 如果 count 等于 3，显示一句话：“count等于3”，反之，显示一句话：“count不等于3”if (count == 3) &#123; printf(\"count等于3\");&#125; else &#123; printf(\"count不等于3\");&#125; 一般在做选择的时候，都会有一些条件来判断到底怎么做选择。比如： a == b (a等于b) a &gt; b (a大于b) a &lt; b (a小于b) a != b (a不等于b) a &gt;= b (a大于或等于b) … 循环结构有些时候，一些相同的事情，是不是不想反复地去做？对于一些一样的操作，其实可以通过循环去做。比如你想让上面的 count 加 3，加 100 次，怎么办。如果是写 100 句 count = count + 3;，那就太累太麻烦了。其实，完全可以这么做： 123456789101112int i;// for 循环for (i = 0; i &lt; 100; i++) &#123; count = count + 3;&#125;// 或者int j = 0;// while 循环while (j &lt; 100) &#123; count = count + 3; j++;&#125; 是不是瞬间感觉，原来这么简单？对，就这么几句话，就搞定了。原理其实很简单，当条件没有达到的时候，就一直做，直到条件达到了为止。 小结编程其实挺好玩的，如果你能 静下心 来玩它的话。基础很重要，这些基本的东西如果理解了，后面学习起来就好多了。加油吧～ PS：才发现写教程原来这么慢，这么难。有些句子，想了好久，又改了好几次，总想写的通俗易懂。内容其实并不多，但还是花了两个多小时。原创不易，且看且珍惜。哈哈哈哈哈哈。","tags":[{"name":"编程","slug":"编程","permalink":"http://veleven.tk/tags/编程/"},{"name":"C 语言","slug":"C-语言","permalink":"http://veleven.tk/tags/C-语言/"}]},{"title":"Mac 下，PHP 与 memcache 的搭配食用","date":"2019-05-21T13:00:35.000Z","path":"2019/05/21/php-and-memcache-in-mac/","text":"昨日，朋友遇到一个问题，需要在 Mac 下安装 memcache 服务，并与 PHP 搭配食用。一开始还以为很简单，只要按照流程安装就好了。不曾想，全是坑啊全是坑啊全是坑！解决不易，作此记录。 基础环境Mac OS 10.12.2 + PHP 7.1 安装 memcached 安装 memcached-1.4.34，需要 libevent-2.0.22-stable 安装 libevent-2.0.22-stable，需要 openssl-1.0.x 注：libevent-2.1.x 则需要 openssl-1.1.x，详见：Build fails on OSX El Capitan 10.11.6 with openssl 安装 memcached 的 PHP 扩展 安装 memcached-2.2.0，需要 libmemcached library 安装 libmemcached-1.0.18 安装 libmemcached 时，Mac OS 会出现错误，需要手动修改部分源码，详见：How can I install libmemcached for Mac OS X Yosemite 10.10 in order to install the memcached.so PHP extension on Mamp 3? PHP7 无法使用 php-memcached 扩展的 master 分支进行编译安装，需要切换到 php7 分支，具体如下： 1sudo git clone -b php7 https://github.com/php-memcached-dev/php-memcached.git 然后，php.ini 中增加 extension=memcached.so；启动 memcached 服务端： 1sudo /usr/local/memcached/bin/memcached -d -m 256 -u nobody -l 127.0.0.1 -P /var/run/memcached.pid 至此，搭配完成，终于可以愉快地食用了~","tags":[{"name":"PHP","slug":"PHP","permalink":"http://veleven.tk/tags/PHP/"},{"name":"memcache","slug":"memcache","permalink":"http://veleven.tk/tags/memcache/"}]}]